#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#LASTCHANGE Added in Unique ID fields
#GENERALCOMMENT This process is used to export info from TM1 for use with QUBEDocs.
#DATASOURCECOMMENT Not Applicable
#PROLOGCOMMENT The prolog is used to output QSON / JSON file. 
#METADATACOMMENT Not Applicable
#DATACOMMENT Not Applicable
#EPILOGCOMMENT Not Applicable

DatasourceASCIIDelimiter=' ';
DataSourceASCIIQuoteCharacter=''; 

sApplicationsFile = pFile;

sCube = 'QUBEDocs Definitions';
sCubeApp = 'QUBEDocs Definitions';
sDefDim = 'QUBEDocs Definition';
sParent ='All Definitions';
sModelEl = 'Entire Model';
sNewLine = CHAR(13) | CHAR(10);
sAutoAppsFlag = 'AUTO';
sDefSubset = '}SYS.' | pFile;
sDelimiter = '$$#@@';

IF (SubsetExists(sDefDim, sDefSubset) = 0);
    SubsetDestroy(sDefDim, sDefSubset);
    sMDXQuery = '{TM1DRILLDOWNMEMBER( {['| sDefDim |'].[All Definitions]}, ALL, RECURSIVE )}';
    SubsetCreateByMDX(sDefSubset, sMDXQuery);
ENDIF;

########################
# APPLICATIONS - OBJECTS
########################

AsciiOutput(sApplicationsFile, '{ ' | sDelimiter | 'Objects'| sDelimiter | ': [' | sNewLine);
i=1;
WHILE(i <= DIMSIZ('QUBEDocs Application'));
 sApp = DIMNM('QUBEDocs Application',i); 

IF(sApp @<> 'Entire Model');

sOwner = CellGetS(sCubeApp,sApp,sParent,'#Owner');
sUsers = CellGetS(sCubeApp,sApp,sParent,'#Users');
sDocName = CellGetS(sCubeApp,sApp,sParent,'#DocumentName');
sDocLink = CellGetS(sCubeApp,sApp,sParent,'#DocumentLink');


 sDesc = CellGetS(sCubeApp,sApp,sParent,'#Desc');

       AsciiOutput(sApplicationsFile,   
                            '{' | sNewLine        
                                   | sDelimiter | 'LogicalName' | sDelimiter | ':' | sDelimiter | 'TM1.Application' | sDelimiter | ',' | sNewLine 
                                   | sDelimiter | 'Name' | sDelimiter | ':' | sDelimiter  | sApp| sDelimiter | ',' | sNewLine
                                   | sDelimiter | 'UniqueName' | sDelimiter | ':' | sDelimiter  | sApp| sDelimiter | ',' | sNewLine
                                   | sDelimiter | 'Description' | sDelimiter | ':' | sDelimiter  | sDesc | sDelimiter | ',' | sNewLine
                                   | sDelimiter | 'Owner' | sDelimiter | ':' | sDelimiter  | sOwner | sDelimiter | ',' | sNewLine
                                   | sDelimiter | 'Users' | sDelimiter | ':' | sDelimiter  | sUsers | sDelimiter | ',' | sNewLine
                                   | sDelimiter | 'DocumentName' | sDelimiter | ':' | sDelimiter  | sDocName | sDelimiter | ',' | sNewLine
                                   | sDelimiter | 'DocumentURL' | sDelimiter | ':' | sDelimiter  | sDocLink | sDelimiter | ',' | sNewLine
                                   | sDelimiter | 'QDOperation' | sDelimiter | ':' | sDelimiter | 'New' | sDelimiter  | sNewLine
                                   | '},' | sNewLine);

 
###################################
#ADD SIMPLE APPLICATIONS - OBJECTS
###################################
sAppGroupString ='';
a = 1;
WHILE(a <= SubsetGetSize(sDefDim,sDefSubset)); 
   sDefinition = SubsetGetElementName(sDefDim,sDefSubset,a);
    sObject = Attrs(sDefDim,sDefinition,'Object');
    sType = 'Item';
    sElement = Attrs(sDefDim,sDefinition,'Element');
    sAppGroup = CellGetS(sCube,sApp,sDefinition,'#AppGroup');
    sDesc = CellGetS(sCube,sApp,sDefinition,'#Desc');
    sName = CellGetS(sCube,sApp,sDefinition,'#IncludeInApplicationAs');
    sDocumentName = CellGetS(sCube,sApp,sDefinition,'#DocumentName');
    sDocumentLink = CellGetS(sCube,sApp,sDefinition,'#DocumentLink');
    sLinkName = CellGetS(sCube,sApp,sDefinition,'#LinkName');
    sLink = CellGetS(sCube,sApp,sDefinition,'#Link');



IF(sAppGroup @<> '' & sAppGroup @<> sAutoAppsFlag);
############ADD IN GROUPS###########
#IF(sAppGroup @<> sAutoAppsFlag);
       AsciiOutput(sApplicationsFile,   
                            '{' | sNewLine        
                                   | sDelimiter | 'LogicalName' | sDelimiter | ':' | sDelimiter | 'TM1.ApplicationGroup' | sDelimiter | ',' | sNewLine 
                                  | sDelimiter | 'UniqueName' | sDelimiter | ':' | sDelimiter  | sApp | '@' | sAppGroup| sDelimiter | ',' | sNewLine
                                  | sDelimiter | 'Name' | sDelimiter | ':' | sDelimiter  | sApp | '@' | sAppGroup| sDelimiter | ',' | sNewLine
                                  | sDelimiter | 'Description' | sDelimiter | ':' | sDelimiter  | sDesc | sDelimiter | ',' | sNewLine
                                   | sDelimiter | 'QDOperation' | sDelimiter | ':' | sDelimiter | 'New' | sDelimiter  | sNewLine
                                   | '},' | sNewLine);

############ADD IN ITEMS###########
        IF(sElement @<> ''); 
         sObject = sObject | '@' | sElement; 
        ENDIF;
       AsciiOutput(sApplicationsFile,   
                            '{' | sNewLine        
                                   | sDelimiter | 'LogicalName' | sDelimiter | ':' | sDelimiter | 'TM1.ApplicationItem' | sDelimiter | ',' | sNewLine 
                                   | sDelimiter | 'SortOrder' | sDelimiter | ':' | sDelimiter  | NumberToString(a) | sDelimiter | ',' | sNewLine
                                   | sDelimiter | 'Name' | sDelimiter | ':' | sDelimiter  | sApp | '@' | sAppGroup | '@' | sName | sDelimiter | ',' | sNewLine
                                   | sDelimiter | 'UniqueName' | sDelimiter | ':' | sDelimiter  | sApp | '@' | sAppGroup | '@' | sName | sDelimiter | ',' | sNewLine
                                   | sDelimiter | 'Description' | sDelimiter | ':' | sDelimiter  | sDesc | sDelimiter | ',' | sNewLine
                                   | sDelimiter | 'DocumentName' | sDelimiter | ':' | sDelimiter  | sDocumentName | sDelimiter | ',' | sNewLine
                                   | sDelimiter | 'DocumentURL' | sDelimiter | ':' | sDelimiter  | sDocumentLink  | sDelimiter | ',' | sNewLine
                                   | sDelimiter | 'URLName' | sDelimiter | ':' | sDelimiter  | sLinkName  | sDelimiter | ',' | sNewLine
                                   | sDelimiter | 'URL' | sDelimiter | ':' | sDelimiter  | sLink   | sDelimiter | ',' | sNewLine
                                   | sDelimiter | 'QDOperation' | sDelimiter | ':' | sDelimiter | 'New' | sDelimiter  | sNewLine
                                   | '},' | sNewLine);

        ENDIF;
      a = a +1;
    END;

ENDIF;
i=i+1;
END;
AsciiOutput(sApplicationsFile, '],');

###########################
# APPLICATIONS - RELATIONSHIPS
###########################
AsciiOutput(sApplicationsFile, ' ' | sDelimiter | 'Relationships' | sDelimiter |': [' | sNewLine);

i=1;
WHILE(i <= DIMSIZ('QUBEDocs Application'));

sApp = DIMNM('QUBEDocs Application',i); 
IF(sApp @<> 'Entire Model');
########################################
#ADD NEW SIMPLE APPLICATIONS - RELATIONSHIPS
########################################
a = 1;
WHILE(a <= SubsetGetSize(sDefDim,sDefSubset));
    sDefinition = SubsetGetElementName(sDefDim,sDefSubset,a);
    sObject = Attrs(sDefDim,sDefinition,'Object');
    sType = Attrs(sDefDim,sDefinition,'Type');
    sElement = Attrs(sDefDim,sDefinition,'Element');
    sAppGroup =  CellGetS(sCube,sApp,sDefinition,'#AppGroup');
    sName = CellGetS(sCube,sApp,sDefinition,'#IncludeInApplicationAs');
    sDesc = CellGetS(sCube,sApp,sDefinition,'#Desc');
    sShowAllEl ='';
    
    IF(sType @= 'Element');
     sShowAllEl = UPPER(CellGetS(sCube,sModelEl,'DIM:' | sObject,'#ShowUndocumentedElements'));
    ENDIF;

      IF(UPPER(CellGetS(sCube,sApp,sDefinition,'#IncludeInApplication')) @= 'YES' & sName @<>'');

       IF(sAppGroup @<> '' & sAppGroup @<> 'Folder');
        IF(sElement @<> ''); 
         sObject = sObject | '@' | sElement; 
        ENDIF;
       AsciiOutput(sApplicationsFile,   
                            '{' | sNewLine        
                                   | sDelimiter | 'LogicalName' | sDelimiter | ':' | sDelimiter | 'TM1.Application' | IF(sType@='NativeView','VIEW',sType) | sDelimiter | ',' | sNewLine 
                                   | sDelimiter | 'SourceLogicalName' | sDelimiter | ':' | sDelimiter | 'TM1.Application' | sDelimiter | ',' | sNewLine 
                                   | sDelimiter | 'SourceName' | sDelimiter | ':' | sDelimiter  | sApp | sDelimiter | ',' | sNewLine
                                   | sDelimiter | 'TargetLogicalName' | sDelimiter | ':' | sDelimiter | 'TM1.' | sType | sDelimiter | ',' | sNewLine 
                                   | sDelimiter | 'TargetName' | sDelimiter | ':' | sDelimiter  | sObject | sDelimiter | '' | sNewLine
                                   | '},' | sNewLine
           );
     ENDIF;
     IF(sAppGroup @<> sAutoAppsFlag);

##############ApplicationGroup Relationships###########
       AsciiOutput(sApplicationsFile,   
                            '{' | sNewLine        
                                   | sDelimiter | 'LogicalName' | sDelimiter | ':' | sDelimiter | 'TM1.ApplicationGroupRel' | sDelimiter | ',' | sNewLine 
                                   | sDelimiter | 'SourceLogicalName' | sDelimiter | ':' | sDelimiter | 'TM1.Application' | sDelimiter | ',' | sNewLine 
                                   | sDelimiter | 'SourceName' | sDelimiter | ':' | sDelimiter  | sApp| sDelimiter | ',' | sNewLine
                                   | sDelimiter | 'TargetLogicalName' | sDelimiter | ':' | sDelimiter | 'TM1.ApplicationGroup' | sDelimiter | ',' | sNewLine 
                                   | sDelimiter | 'TargetName' | sDelimiter | ':' | sDelimiter  | sApp | '@' | sAppGroup | sDelimiter | '' | sNewLine
                                   | '},' | sNewLine
           );


##############ApplicationItem Relationships###########
        AsciiOutput(sApplicationsFile, 
                            '{' | sNewLine        
                                   | sDelimiter | 'LogicalName' | sDelimiter | ':' | sDelimiter | 'TM1.ApplicationGroupItemRel' | sDelimiter | ',' | sNewLine 
                                   | sDelimiter | 'SourceLogicalName' | sDelimiter | ':' | sDelimiter | 'TM1.ApplicationGroup' | sDelimiter | ',' | sNewLine 
                                   | sDelimiter | 'SourceName' | sDelimiter | ':' | sDelimiter  | sApp | '@' | sAppGroup | sDelimiter | ',' | sNewLine
                                   | sDelimiter | 'TargetLogicalName' | sDelimiter | ':' | sDelimiter | 'TM1.ApplicationItem' | sDelimiter | ',' | sNewLine 
                                   | sDelimiter | 'TargetName' | sDelimiter | ':' | sDelimiter  | sApp | '@' | sAppGroup | '@' | sName | sDelimiter | '' | sNewLine
                                   | '},' | sNewLine
           );



        ENDIF;
      ENDIF;
      a = a +1;
    END;
ENDIF;
i=i+1;
END;

AsciiOutput(sApplicationsFile, ']}');
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

IF (SubsetExists(sDefDim, sDefSubset) = 0);
    SubsetDestroy(sDefDim, sDefSubset);
    sMDXQuery = '{TM1DRILLDOWNMEMBER( {['| sDefDim |'].[All Definitions]}, ALL, RECURSIVE )}';
ENDIF;
#endregion