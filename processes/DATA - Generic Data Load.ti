#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#=============================================================================================
# PURPOSE - Process will load data into the bpmFinance cube
#    Note that the process will first zero out any existing data for the scenario/book combination
#=============================================================================================

#====================================================
#   Define Global Variables
#====================================================
strCube = 'bpmFinance';
strOutputPath = 'C:\TM1\DemoV10\TM1Server\Logs\';

#====================================================
# >>> Zero Out Data for Scenario and Book Parameters
#====================================================

# Create Zero out view
#-------------------------------------------------------------------------------------------------------
strView = 'zzFinanceZeroOut';
strSub = strView;

IF (VIEWEXISTS (strCube, strView) <> 0);
    VIEWDESTROY (strCube, strView);
ENDIF;

VIEWCREATE (strCube, strView);

# Assign Scenario Parameter
#-------------------------------------------------------------------------------------------------------
strDim = 'bpmScenario';
strElement = pScenario;

IF (SUBSETEXISTS (strDim, strSub) = 0);
     SUBSETCREATE (strDim, strSub);
ENDIF;

SUBSETDELETEALLELEMENTS (strDim, strSub);
SUBSETELEMENTINSERT ( strDim, strSub, strElement, 1 );
VIEWSUBSETASSIGN (strCube, strView, strDim, strSub);

# Assign Book Parameter
#-------------------------------------------------------------------------------------------------------
strDim = 'bpmBook';
strElement = pBook;

IF (SUBSETEXISTS (strDim, strSub) = 0);
     SUBSETCREATE (strDim, strSub);
ENDIF;

SUBSETDELETEALLELEMENTS (strDim, strSub);
SUBSETELEMENTINSERT ( strDim, strSub, strElement, 1 );
VIEWSUBSETASSIGN (strCube, strView, strDim, strSub);


# Perform Zero Out
#-------------------------------------------------------------------------------------------------------
VIEWZEROOUT (strCube, strView);

# Clean up - 
#  Remove temporary View and Subsets
#-------------------------------------------------------------------------------------------------------
VIEWDESTROY (strCube, strView);
strDim = 'bpmScenario';
SUBSETDESTROY (strDim, strSub);
strDim = 'bpmBook';
SUBSETDESTROY (strDim, strSub);


#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****

#====================================================
# Add any new elments defined on source file to appropirate dimensions
# Create log file of all added elements for System Admin review.
#====================================================

#====================================================
#   Define Variables
#====================================================
strScen = pScenario;
strCO = vCompany;
strDpt = vDepartment;
strAcct = vAccount;
strCurrency = vCurrency;
strBK = pBook;
strPer = vPeriod | vYear;

#====================================================
# Add New Scenario to Dim and add to Orphans
#====================================================
strDim = 'bpmScenario';
strElement= strScen;
strDefParent='Orphans';

# If Element does not exists
#      Add to dimension; add as child to Orphan
#      Write out record to message file.
#-------------------------------------------------------------------------------------------------------
IF (DIMIX (strDim, strElement) = 0);
     DIMENSIONELEMENTINSERT (strDim, '', strElement, 'N');
     IF (DIMIX (strDim, strDefParent ) = 0);
          DIMENSIONELEMENTINSERT (strDim, '', strDefParent, 'N');
     ENDIF;
     DIMENSIONELEMENTCOMPONENTADD (strDim, strDefParent, strElement, 1);

     ASCIIOUTPUT (strOutputPath, strElement | ' : New ' | strDim | ' created under - ' | strDefParent );
ENDIF;


#======================================
# Add New Company to Dim and add to Orphans
#======================================
strDim = 'bpmCompany';
strElement= strCO;
strDefParent='Orphans';

# If Element does not exists
#      Add to dimension; add as child to Orphan
#      Write out record to message file.
#-------------------------------------------------------------------------------------------------------
IF (DIMIX (strDim, strElement) = 0);
     DIMENSIONELEMENTINSERT (strDim, '', strElement, 'N');
     IF (DIMIX (strDim, strDefParent ) = 0);
          DIMENSIONELEMENTINSERT (strDim, '', strDefParent, 'N');
     ENDIF;
     DIMENSIONELEMENTCOMPONENTADD (strDim, strDefParent, strElement, 1);

     ASCIIOUTPUT (strOutputPath, strElement | ' : New ' | strDim | ' created under - ' | strDefParent );
ENDIF;


#======================================
# Add New Department to Dim and add to Orphans
#======================================
strDim = 'bpmDepartment';
strElement= strDpt;
strDefParent='Orphans';

# If Element does not exists
#      Add to dimension; add as child to Orphan
#      Write out record to message file.
#-------------------------------------------------------------------------------------------------------
IF (DIMIX (strDim, strElement) = 0);
     DIMENSIONELEMENTINSERT (strDim, '', strElement, 'N');
     IF (DIMIX (strDim, strDefParent ) = 0);
          DIMENSIONELEMENTINSERT (strDim, '', strDefParent, 'N');
     ENDIF;
     DIMENSIONELEMENTCOMPONENTADD (strDim, strDefParent, strElement, 1);

     ASCIIOUTPUT (strOutputPath, strElement | ' : New ' | strDim | ' created under - ' | strDefParent );
ENDIF;


#======================================
# Add Account to Dim and add to Orphans
#======================================
strDim = 'bpmAccount';
strElement= strAcct;
strDefParent='Orphans';

# If Element does not exists
#      Add to dimension; add as child to Orphan
#      Write out record to message file.
#-------------------------------------------------------------------------------------------------------
IF (DIMIX (strDim, strElement) = 0);
     DIMENSIONELEMENTINSERT (strDim, '', strElement, 'N');
     IF (DIMIX (strDim, strDefParent ) = 0);
          DIMENSIONELEMENTINSERT (strDim, '', strDefParent, 'N');
     ENDIF;
     DIMENSIONELEMENTCOMPONENTADD (strDim, strDefParent, strElement, 1);

     ASCIIOUTPUT (strOutputPath, strElement | ' : New ' | strDim | ' created under - ' | strDefParent );
ENDIF;


#======================================
# Add Currency to Dim and add to Total Currency
#======================================
strDim = 'bpmCurrency';
strElement= strCurrency;
strDefParent='Total Currency';

# If Element does not exists
#      Add to dimension; add as child to Orphan
#      Write out record to message file.
#-------------------------------------------------------------------------------------------------------
IF (DIMIX (strDim, strElement) = 0);
     DIMENSIONELEMENTINSERT (strDim, '', strElement, 'N');
     IF (DIMIX (strDim, strDefParent ) = 0);
          DIMENSIONELEMENTINSERT (strDim, '', strDefParent, 'N');
     ENDIF;
     DIMENSIONELEMENTCOMPONENTADD (strDim, strDefParent, strElement, 1);

     ASCIIOUTPUT (strOutputPath, strElement | ' : New ' | strDim | ' created under - ' | strDefParent );
ENDIF;


#======================================
# Add Book to Dim and add to Orphans
#======================================
strDim = 'bpmBook';
strElement= strBK;
strDefParent='Orphans';

# If Element does not exists
#      Add to dimension; add as child to Orphan
#      Write out record to message file.
#-------------------------------------------------------------------------------------------------------
IF (DIMIX (strDim, strElement) = 0);
     DIMENSIONELEMENTINSERT (strDim, '', strElement, 'N');
     IF (DIMIX (strDim, strDefParent ) = 0);
          DIMENSIONELEMENTINSERT (strDim, '', strDefParent, 'N');
     ENDIF;
     DIMENSIONELEMENTCOMPONENTADD (strDim, strDefParent, strElement, 1);

     ASCIIOUTPUT (strOutputPath, strElement | ' : New ' | strDim | ' created under - ' | strDefParent );
ENDIF;


#======================================
# Add Period to Dim and add to Orphans
#======================================
strDim = 'bpmPeriod';
strElement= strPer;
strDefParent='Orphans';

# If Element does not exists
#      Add to dimension; add as child to Orphan
#      Write out record to message file.
#-------------------------------------------------------------------------------------------------------
IF (DIMIX (strDim, strElement) = 0);
     DIMENSIONELEMENTINSERT (strDim, '', strElement, 'N');
     IF (DIMIX (strDim, strDefParent ) = 0);
          DIMENSIONELEMENTINSERT (strDim, '', strDefParent, 'N');
     ENDIF;
     DIMENSIONELEMENTCOMPONENTADD (strDim, strDefParent, strElement, 1);

     ASCIIOUTPUT (strOutputPath, strElement | ' : New ' | strDim | ' created under - ' | strDefParent );
ENDIF;

#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

#====================================================
#  Define Global Variables
#====================================================
strCube = 'bpmFinance';
strScen = pScenario;
strCO = vCompany;
strDpt = vDepartment;
strAcct = vAccount;
strCurrency = vCurrency;
strBK = pBook;
strPer = vPeriod | vYear;
nAmt = vAmount;

#====================================================
#  Load values into cube -
#      Note use of INCREMENT function in case source files has multple
#      records for same cros section.  Values will be accumulated.
#====================================================
CELLINCREMENTN (nAmt, strCube, strScen, strCO, strDpt, strAcct, strCurrency, strBK, strPer);


#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion